# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    function_man                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: sergio <sergio@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/02/06 17:15:00 by sergio            #+#    #+#              #
#    Updated: 2024/02/06 17:48:34 by sergio           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

open:

Descripción: Abre un archivo o crea uno nuevo.

Uso: int open(const char *path, int flags, mode_t mode);

Parámetros:
path:	Ruta del archivo a abrir o crear.
flags:	Modo de apertura del archivo. Pueden ser los siguientes valores:
	- O_RDONLY: Abre el archivo en modo lectura.
	- O_WRONLY: Abre el archivo en modo escritura.
	- O_RDWR: Abre el archivo en modo lectura y escritura.
	- O_CREAT: Crea el archivo si no existe.
	- O_APPEND: Escribe al final del archivo.
	- O_TRUNC: Trunca el archivo a cero bytes.
	- O_EXCL: Si se utiliza con O_CREAT, falla si el archivo ya existe.
	- O_SYNC: Escribe los datos de manera sincrónica.
	- O_NONBLOCK: Abre el archivo en modo no bloqueante.
	- O_DSYNC: Escribe los datos de manera asincrónica.
	- O_RSYNC: Lee los datos de manera asincrónica.
	- O_DIRECTORY: Abre el archivo como un directorio.
	- O_NOFOLLOW: No sigue enlaces simbólicos.
	- O_CLOEXEC: Cierra el archivo en el proceso hijo.
	- O_DIRECT: Abre el archivo en modo directo.
	- O_NOATIME: No actualiza el tiempo de acceso.
	- O_PATH: Abre el archivo en modo path.
	- O_TMPFILE: Crea un archivo temporal.
	- O_TTY_INIT: Inicializa el archivo como una terminal.
	- O_LARGEFILE: Abre el archivo como un archivo grande.
mode:	Permisos del archivo en caso de que se cree.

Valor de retorno: Descriptor de archivo en caso de éxito, -1 en caso de error de
	apertura.

Ejemplo: int fd = open("archivo.txt", O_RDWR | O_CREAT, 0666);

--------------------------------------------------------------------------------

close:

Descripción: Cierra un archivo.

Uso: int close(int fd);

Parámetros:
fd:	Descriptor de archivo a cerrar.

Valor de retorno: 0 en caso de éxito, -1 en caso de error.

Ejemplo: close(fd);

--------------------------------------------------------------------------------

read:

Descripción: Lee datos de un archivo.

Uso: ssize_t read(int fd, void *buf, size_t count);

Parámetros:
fd:	Descriptor de archivo del que se leerán los datos.
buf:	Buffer en el que se almacenarán los datos leídos.
count:	Número de bytes a leer.

Valor de retorno: Número de bytes leídos, 0 si se llegó al final del archivo, -1
	en caso de error.

Ejemplo:	char buf[100];
			ssize_t bytes = read(fd, buf, 100);

--------------------------------------------------------------------------------

write:

Descripción: Escribe datos en un archivo.

Uso: ssize_t write(int fd, const void *buf, size_t count);

Parámetros:
fd:		Descriptor de archivo en el que se escribirán los datos.
buf:	Buffer que contiene los datos a escribir.
count:	Número de bytes a escribir.

Valor de retorno: Número de bytes escritos, -1 en caso de error.

Ejemplo:	char buf[100] = "Hola, mundo!";
			ssize_t bytes = write(fd, buf, 100);

--------------------------------------------------------------------------------

malloc:

Descripción: Reserva un bloque de memoria.

Uso: void *malloc(size_t size);

Parámetros:
size:	Tamaño del bloque de memoria a reservar.

Valor de retorno: Puntero al bloque de memoria reservado, NULL en caso de error.

Ejemplo:	char *str = (char *)malloc(100);

--------------------------------------------------------------------------------

free:

Descripción: Libera un bloque de memoria.

Uso: void free(void *ptr);

Parámetros:
ptr:	Puntero al bloque de memoria a liberar.

Valor de retorno: Ninguno.

Ejemplo:	free(str);

--------------------------------------------------------------------------------

perror:

Descripción: Imprime un mensaje de error.

Uso: void perror(const char *s);

Parámetros:
s:	Mensaje a imprimir.

Valor de retorno: Ninguno. Imprime el mensaje de error en stderr.

Ejemplo:	perror("Error al abrir el archivo");

--------------------------------------------------------------------------------

strerror:

Descripción: Devuelve un mensaje de error.

Uso: char *strerror(int errnum);

Parámetros:
errnum:	Número de error. Si se pasa 0, se utiliza el valor de errno.

Valor de retorno: Mensaje de error correspondiente al número de error. NULL si 
	el número de error no es válido.

Ejemplo:	char *error = strerror(errno);

--------------------------------------------------------------------------------

access:

Descripción: Comprueba si un archivo existe y si se puede acceder a él.

Uso: int access(const char *path, int mode);

Parámetros:
path:	Ruta del archivo a comprobar.
mode:	Modo de acceso a comprobar. Puede ser uno de los siguientes valores:
	- F_OK: Comprueba si el archivo existe.
	- R_OK: Comprueba si se puede leer el archivo.
	- W_OK: Comprueba si se puede escribir en el archivo.
	- X_OK: Comprueba si se puede ejecutar el archivo.

Valor de retorno: 0 en caso de éxito, -1 en caso de error.

Ejemplo:	int result = access("archivo.txt", F_OK);

--------------------------------------------------------------------------------

dup:

Descripción: Duplica un descriptor de archivo.

Uso: int dup(int oldfd);

Parámetros:
oldfd:	Descriptor de archivo a duplicar.

Valor de retorno: Nuevo descriptor de archivo duplicado, -1 en caso de error.

Ejemplo:	int newfd = dup(fd);

--------------------------------------------------------------------------------

dup2:

Descripción: Duplica un descriptor de archivo en otro descriptor.

Uso: int dup2(int oldfd, int newfd);

Parámetros:
oldfd:	Descriptor de archivo a duplicar.
newfd:	Nuevo descriptor de archivo.

Valor de retorno: Nuevo descriptor de archivo duplicado, -1 en caso de error.

Ejemplo:	int newfd = dup2(fd, 3);

--------------------------------------------------------------------------------

execve:

Descripción: Ejecuta un programa.

Uso: int execve(const char *filename, char *const argv[], char *const envp[]);
Parámetros:
filename:	Nombre del programa a ejecutar.
argv:		Argumentos del programa.
envp:		Variables de entorno del programa.

Valor de retorno: -1 en caso de error.

Ejemplo 1:	char *args[] = {"ls", "-l", NULL};
			char *env[] = {NULL};
			execve("/bin/ls", args, env, NULL);

Ejemplo 2:	char *args[] = {"wc", "-l", NULL};
			char *env[] = {NULL};
			execve("/usr/bin/wc", args, env, NULL);

Ejemplo 3:	char *args[] = {"wc", "-w", ºNULL};
			char *env[] = {NULL};
			execve("/usr/bin/wc", args, env, NULL);

Ejemplo 4:	char *args[] = {"grep", "hola", NULL};
			char *env[] = {NULL};
			execve("/bin/grep", args, env, NULL);

--------------------------------------------------------------------------------

exit:

Descripción: Termina el proceso actual.

Uso: void exit(int status);

Parámetros:
status:	Estado de salida del proceso.

Valor de retorno: Ninguno.

Ejemplo:	exit(0);

--------------------------------------------------------------------------------

fork:

Descripción: Crea un nuevo proceso.

Uso: pid_t fork(void);

Parámetros: Ninguno.

Valor de retorno: 0 en el proceso hijo, PID del proceso hijo en el proceso
	padre, -1 en caso de error.

Ejemplo:	pid_t pid = fork();

--------------------------------------------------------------------------------

pipe:

Descripción: Crea un par de descriptores de archivo para una tubería.

Uso: int pipe(int pipefd[2]);

Parámetros:
pipefd:	Arreglo de dos enteros en el que se almacenarán los descriptores de
	archivo.

Valor de retorno: 0 en caso de éxito, -1 en caso de error.

Ejemplo:	int fd[2];
			pipe(fd);

--------------------------------------------------------------------------------

unlink:

Descripción: Elimina un archivo.

Uso: int unlink(const char *pathname);

Parámetros:
pathname:	Ruta del archivo a eliminar.

Valor de retorno: 0 en caso de éxito, -1 en caso de error.

Ejemplo:	int result = unlink("archivo.txt");

--------------------------------------------------------------------------------

wait:

Descripción: Espera a que un proceso hijo termine.

Uso: pid_t wait(int *status);

Parámetros:
status:	Estado de salida del proceso hijo.

Valor de retorno: PID del proceso hijo que terminó, -1 en caso de error.

Ejemplo:	pid_t pid = wait(&status);

--------------------------------------------------------------------------------

waitpid:

Descripción: Espera a que un proceso hijo termine.

Uso: pid_t waitpid(pid_t pid, int *status, int options);

Parámetros:
pid:	PID del proceso hijo a esperar.
status:	Estado de salida del proceso hijo.
options:	Opciones de espera. Puede ser uno de los siguientes valores:
	- WNOHANG: No espera si el proceso hijo no ha terminado.
	- WUNTRACED: Espera si el proceso hijo ha sido detenido.

Valor de retorno: PID del proceso hijo que terminó, -1 en caso de error.

Ejemplo:	pid_t pid = waitpid(child_pid, &status, 0);

--------------------------------------------------------------------------------